control = sim_control(nschls = 12L, n_cohorts = 4L,
assessment_adjustment = assess_adj,
assess_sim_par = assess_sim_par,
grad_adjustment = grad_adj))
names(zzz)
str(zzz)
y[x == "62"] <- "Italian Language and Culture"
str(simlist$stu_year)
table(simlist$stu_year$grade)
################################################################################
# Generate AP Report Data
# Date: 10/05/2018
# Author: Jared E. Knowles
# Prepared for OpenSDP
################################################################################
##
source("R/ap_tools.R")
library(equate)
library(OpenSDPsynthR)
set.seed(0525212) # set the seed
library(magrittr)
library(stringr)
# The synthesizer needs some input paramaters
# As it is the defaults are not sufficient to give realistic assessment data
# These change those defaults to make the scores less deterministic
assess_adj <- sim_control()$assessment_adjustment
# Make scores spread out more
assess_adj$perturb_base <- function(x, sd)
{
mean_shift <- rnorm(1, sd = 3)
y <- x + rnorm(1, mean_shift, sd * 0.8)
return(y)
}
assess_adj$gender_list <- list("Male" = 1,
"Female" = -1)
assess_adj$frl_list <- list("0" = 0.1,
"1" = -0.1)
# Get defaults
assess_sim_par <- OpenSDPsynthR::sim_control()$assess_sim_par
# Increase score variance
assess_sim_par$error_var <- 15
# Increase coefficient effects
assess_sim_par$fixed_param <- assess_sim_par$fixed_param * 10
# Downgrade IEP difference
assess_sim_par$fixed_param[4] <- -0.75
# Downgrade LEP difference
assess_sim_par$fixed_param[5] <- -1
assess_sim_par$fixed_param[6] <- 0
assess_sim_par$fixed_param[7] <- 1
assess_sim_par$lvl1_err_params$mean <- 1
assess_sim_par$lvl1_err_params$sd <- 10
# Set group level variances
assess_sim_par$random_param$random_var <- c(0.4, 0.75)
# Set the school-grade size ranges
assess_sim_par$unbalanceRange <- c(100, 420)
grad_adj <- sim_control()$grad_adjustment
grad_adj$school_list <- NULL
grad_adj$perturb_school <- function(x, schid, schl_par = school_list){
val_mean <- schl_par[[which(schid == names(schl_par))]]
val_sd <- val_mean / 4
val_sd <- abs(val_sd)
y <- x + num_clip(rnorm(1, mean = val_mean, sd = val_sd), -0.45, 0.45)
y <- ifelse(y <= 0, 0.01, y)
y <- ifelse(y >= 1, 0.98, y)
y <- num_clip(y, 0, 1)
return(y)
}
# Conduct the simulation
simlist <- simpop(5000L, seed = 0525212,
control = sim_control(nschls = 12L, n_cohorts = 4L,
assessment_adjustment = assess_adj,
assess_sim_par = assess_sim_par,
grad_adjustment = grad_adj))
devtools::install_github("jknowles/simglm")
source("R/ap_tools.R")
library(equate)
library(OpenSDPsynthR)
set.seed(0525212) # set the seed
library(magrittr)
library(stringr)
# The synthesizer needs some input paramaters
# As it is the defaults are not sufficient to give realistic assessment data
# These change those defaults to make the scores less deterministic
assess_adj <- sim_control()$assessment_adjustment
# Make scores spread out more
assess_adj$perturb_base <- function(x, sd)
{
mean_shift <- rnorm(1, sd = 3)
y <- x + rnorm(1, mean_shift, sd * 0.8)
return(y)
}
assess_adj$gender_list <- list("Male" = 1,
"Female" = -1)
assess_adj$frl_list <- list("0" = 0.1,
"1" = -0.1)
# Get defaults
assess_sim_par <- OpenSDPsynthR::sim_control()$assess_sim_par
# Increase score variance
assess_sim_par$error_var <- 15
# Increase coefficient effects
assess_sim_par$fixed_param <- assess_sim_par$fixed_param * 10
# Downgrade IEP difference
assess_sim_par$fixed_param[4] <- -0.75
# Downgrade LEP difference
assess_sim_par$fixed_param[5] <- -1
assess_sim_par$fixed_param[6] <- 0
assess_sim_par$fixed_param[7] <- 1
assess_sim_par$lvl1_err_params$mean <- 1
assess_sim_par$lvl1_err_params$sd <- 10
# Set group level variances
assess_sim_par$random_param$random_var <- c(0.4, 0.75)
# Set the school-grade size ranges
assess_sim_par$unbalanceRange <- c(100, 420)
grad_adj <- sim_control()$grad_adjustment
grad_adj$school_list <- NULL
grad_adj$perturb_school <- function(x, schid, schl_par = school_list){
val_mean <- schl_par[[which(schid == names(schl_par))]]
val_sd <- val_mean / 4
val_sd <- abs(val_sd)
y <- x + num_clip(rnorm(1, mean = val_mean, sd = val_sd), -0.45, 0.45)
y <- ifelse(y <= 0, 0.01, y)
y <- ifelse(y >= 1, 0.98, y)
y <- num_clip(y, 0, 1)
return(y)
}
# Conduct the simulation
simlist <- simpop(5000L, seed = 0525212,
control = sim_control(nschls = 12L, n_cohorts = 4L,
assessment_adjustment = assess_adj,
assess_sim_par = assess_sim_par,
grad_adjustment = grad_adj))
devtools::install_github("jknowles/simglm")
################################################################################
# Generate AP Report Data
# Date: 10/05/2018
# Author: Jared E. Knowles
# Prepared for OpenSDP
################################################################################
##
source("R/ap_tools.R")
library(equate)
library(OpenSDPsynthR)
set.seed(0525212) # set the seed
library(magrittr)
library(stringr)
# The synthesizer needs some input paramaters
# As it is the defaults are not sufficient to give realistic assessment data
# These change those defaults to make the scores less deterministic
assess_adj <- sim_control()$assessment_adjustment
# Make scores spread out more
assess_adj$perturb_base <- function(x, sd)
{
mean_shift <- rnorm(1, sd = 3)
y <- x + rnorm(1, mean_shift, sd * 0.8)
return(y)
}
assess_adj$gender_list <- list("Male" = 1,
"Female" = -1)
assess_adj$frl_list <- list("0" = 0.1,
"1" = -0.1)
# Get defaults
assess_sim_par <- OpenSDPsynthR::sim_control()$assess_sim_par
# Increase score variance
assess_sim_par$error_var <- 15
# Increase coefficient effects
assess_sim_par$fixed_param <- assess_sim_par$fixed_param * 10
# Downgrade IEP difference
assess_sim_par$fixed_param[4] <- -0.75
# Downgrade LEP difference
assess_sim_par$fixed_param[5] <- -1
assess_sim_par$fixed_param[6] <- 0
assess_sim_par$fixed_param[7] <- 1
assess_sim_par$lvl1_err_params$mean <- 1
assess_sim_par$lvl1_err_params$sd <- 10
# Set group level variances
assess_sim_par$random_param$random_var <- c(0.4, 0.75)
# Set the school-grade size ranges
assess_sim_par$unbalanceRange <- c(100, 420)
grad_adj <- sim_control()$grad_adjustment
grad_adj$school_list <- NULL
grad_adj$perturb_school <- function(x, schid, schl_par = school_list){
val_mean <- schl_par[[which(schid == names(schl_par))]]
val_sd <- val_mean / 4
val_sd <- abs(val_sd)
y <- x + num_clip(rnorm(1, mean = val_mean, sd = val_sd), -0.45, 0.45)
y <- ifelse(y <= 0, 0.01, y)
y <- ifelse(y >= 1, 0.98, y)
y <- num_clip(y, 0, 1)
return(y)
}
# Conduct the simulation
simlist <- simpop(5000L, seed = 0525212,
control = sim_control(nschls = 12L, n_cohorts = 4L,
assessment_adjustment = assess_adj,
assess_sim_par = assess_sim_par,
grad_adjustment = grad_adj))
out_data <- left_join(simlist$demog_master %>%
select(sid, Sex, Race), simlist$stu_year)
out_data <- left_join(out_data, simlist$schools %>% select(schid, name, lea_id))
out_data <- left_join(out_data, simlist$stu_assess %>% dplyr::select(sid, math_ss, rdg_ss))
out_data <- filter(out_data, grade %in% c("10", "11", "12"))
out_data <- rename(out_data, SEX = Sex)
out_data$SEX <- substr(out_data$SEX, 1, 1)
out_data$Race <-  forcats::fct_expand(out_data$Race,
"MEXICAN", "PUERTORICAN",
"HISP_LAT", "NON_HISP_LAT",
"CUBAN")
# Augment race variables
out_data$Race[out_data$Race == "Hispanic or Latino Ethnicity"] <-
sample(c("MEXICAN", "PUERTORICAN", "HISP_LAT", "NON_HISP_LAT", "CUBAN"), length(out_data$Race[out_data$Race == "Hispanic or Latino Ethnicity"]),
replace = TRUE)
# Factor expand
out_data$Race <- forcats::fct_recode(out_data$Race,
WHITE = "White",
ASIAN = "Asian",
AFRICANAMERICAN = "Black or African American",
HAWAIIAN_PI = "Native Hawaiian or Other Pacific Islander",
INDIAN_ALASKAN = "American Indian or Alaska Native",
MULTIETHNIC = "Demographic Race Two or More Races")
out_data$Race <- forcats::fct_drop(out_data$Race)
out_data$RACE_ETH_ <- out_data$Race
names(out_data)
all_codes <- c("07", "13", "14", "15", "16", "20", "22", "23", "25", "28",
"31", "33", "34", "35", "36", "37", "40", "43", "48", "51",
"53", "55", "57", "58", "60", "61", "62", "64", "66", "68",
"69", "75", "76", "77", "80", "82", "78", "83", "84", "85",
"87", "89", "90", "93")
1/44
code_probs <- c(0.15, 0.01, 0.005, 0.005, 0.005, 0.1, 0.0005, 0.0005, 0.04, 0.001,
0.03, 0.00, 0.03, 0.03, 0.15, 0.05, 0.03, 0.04, 0.00, 0.01,
0.01, 0.01, 0.1, 0.001, 0.01, 0.000, 0.005, 0.005, 0.1,
0.02, 0.001, 0.06, 0.03, 0.001, 0.01, 0.01, 0.00, 0.1, 0.05, 0.05,
0.1, 0.03, 0.1, 0.1)
sum(code_probs)
sample(all_codes, 20, replace = TRUE, prob = code_probs)
ap_exam_codes(sample(all_codes, 20, replace = TRUE, prob = code_probs))
table(ap_exam_codes(sample(all_codes, 100, replace = TRUE, prob = code_probs)))
gen_ap_exam_codes <- function(x) {
all_codes <- c("07", "13", "14", "15", "16", "20", "22", "23", "25", "28",
"31", "33", "34", "35", "36", "37", "40", "43", "48", "51",
"53", "55", "57", "58", "60", "61", "62", "64", "66", "68",
"69", "75", "76", "77", "80", "82", "78", "83", "84", "85",
"87", "89", "90", "93")
code_probs <- c(0.15, 0.01, 0.005, 0.005, 0.005, 0.1, 0.0005, 0.0005, 0.04, 0.001,
0.03, 0.00, 0.03, 0.03, 0.15, 0.05, 0.03, 0.04, 0.00, 0.01,
0.01, 0.01, 0.1, 0.001, 0.01, 0.000, 0.005, 0.005, 0.1,
0.02, 0.001, 0.06, 0.03, 0.001, 0.01, 0.01, 0.00, 0.1, 0.05, 0.05,
0.1, 0.03, 0.1, 0.1)
N <- length(x)
sample(all_codes, N, replace = TRUE, prob = code_probs)
}
zzz <- gen_ap_exam_codes(out_data$sid)
length(zzz)
nrow(out_data)
out_data$`Exam Code` <- gen_ap_exam_codes(out_data$sid)
names(out_data)
5:1
samp_score_avg <- sample(5:1, 10000, replace = TRUE,
prob = c(0.17, 0.25, 0.25, 0.2, 0.13))
table(samp_score_avg)
prop.table(table(samp_score_avg))
scale_score_to_ap <- function(x) {
# https://apscore.collegeboard.org/scores/about-ap-scores/score-distributions/
samp_score_avg <- sample(5:1, 10000, replace = TRUE,
prob = c(0.17, 0.25, 0.25, 0.2, 0.13))
rx <- equate::freqtab(samp_score_avg)
ry <- equate::freqtab(round(x, digits = 0))
## Equate the new score with the simulated SAT score
zzz <- equate::equate(ry, rx, type = "equipercentile", boot = TRUE, reps = 5)
new_score <- equate::equate(x, y = zzz)
new_score <- round(new_score, digits = 0)
return(new_score)
}
scale_score_to_ap(head(out_data$rdg_ss))
scale_score_to_ap(fuzz_score(head(out_data$rdg_ss)))
scale_score_to_ap(fuzz_score(head(out_data$rdg_ss), fuzz = 5))
scale_score_to_ap(fuzz_score(head(out_data$rdg_ss), fuzz = 10))
traceback()
fuzz_score(head(out_data$rdg_ss), fuzz = 3)
traceback()
head(out_data$rdg_ss)
fuzz_score(head(out_data$rdg_ss), fuzz = 30)
out_data$`Exam Grade` <- scale_score_to_ap(out_data$rdg_ss)
table(out_data$`Exam Grade`)
out_data %>% group_by(sid) %>%
mutate(distinct = n()) %>% pull(distinct) %>% table
table(out_data$grade)
table(out_data$schid)
table(out_data$sid == 1)
summary(out_data$sid)
View(out_data[out_data$sid == "2422",])
out_data <- left_join(simlist$demog_master %>%
select(sid, Sex, Race), simlist$stu_year)
out_data <- left_join(out_data, simlist$schools %>% select(schid, name, lea_id))
names(simlist$assess)
out_data <- left_join(out_data,
simlist$stu_assess %>% dplyr::select(sid, math_ss, rdg_ss, grade))
out_data <- left_join(simlist$demog_master %>%
select(sid, Sex, Race), simlist$stu_year)
out_data <- left_join(out_data, simlist$schools %>% select(schid, name, lea_id))
out_data <- left_join(out_data,
simlist$stu_assess %>%
dplyr::select(sid, math_ss, rdg_ss, grade))
out_data <- filter(out_data, grade %in% c("10", "11", "12"))
out_data <- rename(out_data, SEX = Sex)
out_data$SEX <- substr(out_data$SEX, 1, 1)
out_data$Race <-  forcats::fct_expand(out_data$Race,
"MEXICAN", "PUERTORICAN",
"HISP_LAT", "NON_HISP_LAT",
"CUBAN")
# Augment race variables
out_data$Race[out_data$Race == "Hispanic or Latino Ethnicity"] <-
sample(c("MEXICAN", "PUERTORICAN", "HISP_LAT", "NON_HISP_LAT", "CUBAN"), length(out_data$Race[out_data$Race == "Hispanic or Latino Ethnicity"]),
replace = TRUE)
# Factor expand
out_data$Race <- forcats::fct_recode(out_data$Race,
WHITE = "White",
ASIAN = "Asian",
AFRICANAMERICAN = "Black or African American",
HAWAIIAN_PI = "Native Hawaiian or Other Pacific Islander",
INDIAN_ALASKAN = "American Indian or Alaska Native",
MULTIETHNIC = "Demographic Race Two or More Races")
out_data$Race <- forcats::fct_drop(out_data$Race)
out_data$RACE_ETH_ <- out_data$Race
out_data$`Exam Code` <- gen_ap_exam_codes(out_data$sid)
out_data$`Exam Grade` <- scale_score_to_ap(out_data$rdg_ss)
out_data %>% group_by(sid) %>%
mutate(distinct = n()) %>% pull(distinct) %>% table
table(out_data$grade)
table(out_data$year)
out_data$`Education Level` <- ap_grade_level(out_data$grade)
out_data %>% group_by(sid, year) %>%
mutate(distinct = n()) %>% pull(distinct) %>% table
# We need to add some duplication in here for students taking multiple
# assessments
added_rows <- sample_frac(out_data, size = 0.05)
added_rows <- sample_frac(out_data, size = 0.1)
out_data <- bind_rows(out_data, added_rows)
# And repeat (to draw a new sample)
added_rows <- sample_frac(out_data, size = 0.05)
out_data <- bind_rows(out_data, added_rows)
summary(out_data$rdg_ss)
test_score <- scale_score_to_ap(sapply(out_data$rdg_ss, fuzz_score, fuzz = 50))
test_score <- scale_score_to_ap(sapply(na.omit(out_data$rdg_ss), fuzz_score, fuzz = 50))
head(test_score)
test_score <- scale_score_to_ap(sapply(na.omit(out_data$rdg_ss), fuzz_score, fuzz = 50))
head(test_score)
test_score <- scale_score_to_ap(sapply(na.omit(out_data$rdg_ss), fuzz_score, fuzz = 50))
head(test_score)
test_score <- scale_score_to_ap(sapply(na.omit(out_data$rdg_ss), fuzz_score, fuzz = 30))
head(test_score)
test_score <- scale_score_to_ap(sapply(na.omit(out_data$rdg_ss), fuzz_score, fuzz = 30))
head(test_score)
test_score <- scale_score_to_ap(sapply(na.omit(out_data$rdg_ss), fuzz_score, fuzz = 30))
head(test_score)
test_score <- scale_score_to_ap(sapply(na.omit(out_data$rdg_ss), fuzz_score, fuzz = 20))
head(test_score)
test_score <- scale_score_to_ap(sapply(na.omit(out_data$rdg_ss), fuzz_score, fuzz = 20))
head(test_score)
test_score <- scale_score_to_ap(sapply(na.omit(out_data$rdg_ss), fuzz_score, fuzz = 20))
head(test_score)
test_score <- scale_score_to_ap(sapply(na.omit(out_data$rdg_ss), fuzz_score, fuzz = 20))
head(test_score)
test_score <- scale_score_to_ap(sapply(na.omit(out_data$rdg_ss), fuzz_score, fuzz = 20))
head(test_score)
source('C:/Users/Jared/GitHub/ap_report/R/ap_tools.R', echo=TRUE)
test_score <- scale_score_to_ap(sapply(out_data$rdg_ss, fuzz_score, fuzz = 20))
head(test_score)
test_score <- scale_score_to_ap(sapply(out_data$rdg_ss, fuzz_score, fuzz = 20))
head(test_score)
table(is.na(out_data$rdg_ss))
table(is.na(out_data$math_ss))
summary(simlist$stu_assess)
out_data <- left_join(simlist$demog_master %>%
select(sid, Sex, Race), simlist$stu_year)
out_data <- left_join(out_data, simlist$schools %>% select(schid, name, lea_id))
names(out_data)
out_data <- left_join(out_data,
simlist$stu_assess %>%
dplyr::select(sid, math_ss, rdg_ss, grade, year))
table(is.na(out_data$rdg_ss))
out_data <- left_join(simlist$demog_master %>%
select(sid, Sex, Race), simlist$stu_year)
out_data <- left_join(out_data, simlist$schools %>% select(schid, name, lea_id))
out_data <- inner_join(out_data,
simlist$stu_assess %>%
dplyr::select(sid, math_ss, rdg_ss, grade, year))
out_data <- filter(out_data, grade %in% c("10", "11", "12"))
out_data <- rename(out_data, SEX = Sex)
out_data$SEX <- substr(out_data$SEX, 1, 1)
out_data$Race <-  forcats::fct_expand(out_data$Race,
"MEXICAN", "PUERTORICAN",
"HISP_LAT", "NON_HISP_LAT",
"CUBAN")
# Augment race variables
out_data$Race[out_data$Race == "Hispanic or Latino Ethnicity"] <-
sample(c("MEXICAN", "PUERTORICAN", "HISP_LAT", "NON_HISP_LAT", "CUBAN"), length(out_data$Race[out_data$Race == "Hispanic or Latino Ethnicity"]),
replace = TRUE)
# Factor expand
out_data$Race <- forcats::fct_recode(out_data$Race,
WHITE = "White",
ASIAN = "Asian",
AFRICANAMERICAN = "Black or African American",
HAWAIIAN_PI = "Native Hawaiian or Other Pacific Islander",
INDIAN_ALASKAN = "American Indian or Alaska Native",
MULTIETHNIC = "Demographic Race Two or More Races")
out_data$Race <- forcats::fct_drop(out_data$Race)
out_data$RACE_ETH_ <- out_data$Race
# We need to add some duplication in here for students taking multiple
# assessments
added_rows <- sample_frac(out_data, size = 0.1)
out_data <- bind_rows(out_data, added_rows)
# And repeat (to draw a new sample)
added_rows <- sample_frac(out_data, size = 0.05)
out_data <- bind_rows(out_data, added_rows)
out_data %>% group_by(sid, year) %>%
mutate(distinct = n()) %>% pull(distinct) %>% table
added_rows <- sample_frac(out_data, size = 0.05)
added_rows_2 <- sample_frac(added_rows, size = 0.8)
added_rows_3 <- sample_frac(added_rows_2, size = 0.25)
out_data <- bind_rows(out_data, added_rows,
added_rows_2, added_rows_3)
out_data %>% group_by(sid, year) %>%
mutate(distinct = n()) %>% pull(distinct) %>% table
out_data <- left_join(simlist$demog_master %>%
select(sid, Sex, Race), simlist$stu_year)
out_data <- left_join(out_data, simlist$schools %>% select(schid, name, lea_id))
out_data <- inner_join(out_data,
simlist$stu_assess %>%
dplyr::select(sid, math_ss, rdg_ss, grade, year))
out_data <- filter(out_data, grade %in% c("10", "11", "12"))
out_data <- rename(out_data, SEX = Sex)
out_data$SEX <- substr(out_data$SEX, 1, 1)
out_data$Race <-  forcats::fct_expand(out_data$Race,
"MEXICAN", "PUERTORICAN",
"HISP_LAT", "NON_HISP_LAT",
"CUBAN")
# Augment race variables
out_data$Race[out_data$Race == "Hispanic or Latino Ethnicity"] <-
sample(c("MEXICAN", "PUERTORICAN", "HISP_LAT", "NON_HISP_LAT", "CUBAN"), length(out_data$Race[out_data$Race == "Hispanic or Latino Ethnicity"]),
replace = TRUE)
# Factor expand
out_data$Race <- forcats::fct_recode(out_data$Race,
WHITE = "White",
ASIAN = "Asian",
AFRICANAMERICAN = "Black or African American",
HAWAIIAN_PI = "Native Hawaiian or Other Pacific Islander",
INDIAN_ALASKAN = "American Indian or Alaska Native",
MULTIETHNIC = "Demographic Race Two or More Races")
out_data$Race <- forcats::fct_drop(out_data$Race)
out_data$RACE_ETH_ <- out_data$Race
# We need to add some duplication in here for students taking multiple
# assessments
added_rows <- sample_frac(out_data, size = 0.1)
out_data <- bind_rows(out_data, added_rows)
# And repeat (to draw a new sample)
added_rows <- sample_frac(out_data, size = 0.05)
out_data <- bind_rows(out_data, added_rows)
# Add some truly many test takers
added_rows <- sample_frac(out_data, size = 0.05)
added_rows_2 <- sample_frac(added_rows, size = 0.8)
added_rows_3 <- sample_frac(added_rows_2, size = 0.25)
out_data <- bind_rows(out_data, added_rows,
added_rows_2, added_rows_3)
out_data$`Exam Code` <- gen_ap_exam_codes(out_data$sid)
out_data$`Exam Grade` <- scale_score_to_ap(sapply(out_data$rdg_ss,
fuzz_score, fuzz = 20))
out_data$`Admin Year` <- out_data$year - 2000
out_data$`Award Year` <- out_data$year - 2000
out_data$`Education Level` <- ap_grade_level(out_data$grade)
names(out_data)
out_data <- rename(out_data, AI_CODE = schid)
out_data <- rename(out_data, AI_INSTITUTE = name)
out_data <- rename(out_data,  DISTRICT_NAME = lea_id)
out_data$DISTRICT_NAME <- "AIUR"
out_data <- rename(out_data, AP_NUMBER = sid)
?select
out_data <- select(out_data, names(out_data)[grepl("^[A-Z]{1,3}", names(out_data))])
names(out_data)
?reshape
out_data <- as.data.frame(out_data)
reshape(out_data, direction = "wide", varying = c("Exam Code", "Exam Grade"),
idvar = c("AP_NUMBER", "SEX", "Race", "AI_CODE", "AI_INSTITUTE",
"DISTRICT_NAME", "RACE_ETH_", "Education Level",
"Admin Year", "Award Year"))
out_data <- group_by(sid, year) %>%
mutate(Exam_Number = 1:n())
out_data <- group_by(AP_NUMBER, `Admin Year`) %>%
mutate(Exam_Number = 1:n())
out_data <- out_data %>% group_by(AP_NUMBER, `Admin Year`) %>%
mutate(Exam_Number = 1:n())
table(out_data$Exam_Number)
out_data <- as.data.frame(out_data)
reshape(out_data, direction = "wide", varying = c("Exam Code", "Exam Grade"),
idvar = c("AP_NUMBER", "SEX", "Race", "AI_CODE", "AI_INSTITUTE",
"DISTRICT_NAME", "RACE_ETH_", "Education Level",
"Admin Year", "Award Year"),
timevar = "Exam Number")
names(out_data)
zzz <- reshape(out_data, direction = "wide", varying = c("Exam Code", "Exam Grade"),
idvar = c("AP_NUMBER", "SEX", "Race", "AI_CODE", "AI_INSTITUTE",
"DISTRICT_NAME", "RACE_ETH_", "Education Level",
"Admin Year", "Award Year"),
timevar = "Exam_Number")
zzz <- reshape(out_data, direction = "wide", v.names = c("Exam Code", "Exam Grade"),
idvar = c("AP_NUMBER", "SEX", "Race", "AI_CODE", "AI_INSTITUTE",
"DISTRICT_NAME", "RACE_ETH_", "Education Level",
"Admin Year", "Award Year"),
timevar = "Exam_Number")
names(zzz)
1:5
str_pad(as.character(1:5), width = 2, pad = "0")
