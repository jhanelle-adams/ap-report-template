usethis::use_git_ignore(ignores = ".Rproj.user")
library(readr)
zzz <- readxl::read_xlsx("data/OPENSDP_AP.xlsx")
names(zzz)
str(zzz)
hist(zzz$`Exam Code 01`)
hist(zzz$`Exam Grade 01`)
MASS::fitdistr(zzz$`Exam Grade 01`)
MASS::fitdistr(na.omit(zzz$`Exam Grade 01`))
MASS::fitdistr(na.omit(zzz$`Exam Grade 01`), densfun = "pois")
?fitdistr
MASS::fitdistr(na.omit(zzz$`Exam Grade 01`), densfun = "geometric")
hist(rgeom(100, 0.25)
)
MASS::fitdistr(na.omit(zzz$`Exam Grade 01`), densfun = "negative binomial")
MASS::fitdistr(na.omit(zzz$`Exam Grade 01`), densfun = "weibull")
hist(rweibull(1000, 2.47, 3.28))
hist(as.integer(rweibull(1000, 2.47, 3.28)))
hist(zzz$exam `Exam Grade 01`)
hist(zzz$`Exam Grade 01`)
hist(as.integer(rweibull(10000, 2.37, 3.28)))
MASS::fitdistr(na.omit(zzz$`Exam Grade 01`), densfun = "gamma")
hist(as.integer(rgamma(10000, 3.985, 1.37)))
?rgama
?rgamma
MASS::fitdistr(na.omit(zzz$`Exam Grade 01`), densfun = "gamma")
MASS::fitdistr(na.omit(zzz$`Exam Grade 01`), densfun = "beta")
MASS::fitdistr(na.omit(zzz$`Exam Grade 01`), densfun = "cauchy")
hist(as.integer(rcauchy(10000, 2.93, 0.93)))
MASS::fitdistr(na.omit(zzz$`Exam Grade 01`), densfun = "Poisson")
hist(as.integer(rpois(10000, 2.9)))
MASS::fitdistr(na.omit(zzz$`Exam Grade 01`), densfun = "Poisson")
hist(zzz$`Exam Grade 01`)
code_yn <- function(x) {
x <- as.character(x)
x [x == "1"] <- "Y"
x [x == "0"] <- "N"
return(x)
}
trim_num <- function(x, floor, ceiling){
x[x < floor] <- floor
x[x > ceiling] <- ceiling
return(x)
}
scale_score_to_ap <- function(x)) {
# example AP
samp_ap <- rpois(10000, 2.9)
samp_ap <- trim_num(samp_ap, 1, 5)
rx <- equate::freqtab(samp_ap)
ry <- equate::freqtab(round(x, digits = 0))
## Equate the new score with the simulated SAT score
zzz <- equate::equate(ry, rx, type = "equipercentile", boot = TRUE, reps = 5)
new_score <- equate::equate(x, y = zzz)
new_score <- as.integer(new_score)
return(new_score)
}
scale_score_to_ap <- function(x) {
# example AP
samp_ap <- rpois(10000, 2.9)
samp_ap <- trim_num(samp_ap, 1, 5)
rx <- equate::freqtab(samp_ap)
ry <- equate::freqtab(round(x, digits = 0))
## Equate the new score with the simulated SAT score
zzz <- equate::equate(ry, rx, type = "equipercentile", boot = TRUE, reps = 5)
new_score <- equate::equate(x, y = zzz)
new_score <- as.integer(new_score)
return(new_score)
}
scale_score <- rnorm(10000, mean = 50, sd = 10)
ap_score <- scale_score_to_ap(scale_score)
summary(ap_score)
table(ap_score)
hist(ap_score)
hist(scale_score)
scale_score_to_ap <- function(x) {
# example AP
samp_ap <- rpois(10000, 3.25)
samp_ap <- trim_num(samp_ap, 1, 5)
rx <- equate::freqtab(samp_ap)
ry <- equate::freqtab(round(x, digits = 0))
## Equate the new score with the simulated SAT score
zzz <- equate::equate(ry, rx, type = "equipercentile", boot = TRUE, reps = 5)
new_score <- equate::equate(x, y = zzz)
new_score <- as.integer(new_score)
return(new_score)
}
ap_score <- scale_score_to_ap(scale_score)
hist(ap_score)
scale_score_to_ap <- function(x) {
# example AP
samp_ap <- rpois(10000, 3.25)
samp_ap <- trim_num(samp_ap, 1, 5)
rx <- equate::freqtab(samp_ap)
ry <- equate::freqtab(round(x, digits = 0))
## Equate the new score with the simulated SAT score
zzz <- equate::equate(ry, rx, type = "equipercentile", boot = TRUE, reps = 5)
new_score <- equate::equate(x, y = zzz)
new_score <- trim_num(new_score, 1, 5)
new_score <- as.integer(new_score)
return(new_score)
}
ap_score <- scale_score_to_ap(scale_score)
hist(ap_score)
scale_score_to_ap <- function(x) {
# example AP
samp_ap <- rpois(10000, 2.6)
samp_ap <- trim_num(samp_ap, 1, 5)
rx <- equate::freqtab(samp_ap)
ry <- equate::freqtab(round(x, digits = 0))
## Equate the new score with the simulated SAT score
zzz <- equate::equate(ry, rx, type = "equipercentile", boot = TRUE, reps = 5)
new_score <- equate::equate(x, y = zzz)
new_score <- trim_num(new_score, 1, 5)
new_score <- as.integer(new_score)
return(new_score)
}
ap_score <- scale_score_to_ap(scale_score)
hist(ap_score)
scale_score_to_ap <- function(x) {
# example AP
samp_ap <- rpois(10000, 3.6)
samp_ap <- trim_num(samp_ap, 1, 5)
rx <- equate::freqtab(samp_ap)
ry <- equate::freqtab(round(x, digits = 0))
## Equate the new score with the simulated SAT score
zzz <- equate::equate(ry, rx, type = "equipercentile", boot = TRUE, reps = 5)
new_score <- equate::equate(x, y = zzz)
new_score <- trim_num(new_score, 1, 5)
new_score <- as.integer(new_score)
return(new_score)
}
ap_score <- scale_score_to_ap(scale_score)
hist(ap_score)
source("R/ap_tools.R")
library(equate)
library(OpenSDPsynthR)
set.seed(0525212) # set the seed
library(magrittr)
library(stringr)
assess_adj <- sim_control()$assessment_adjustment
# Make scores spread out more
assess_adj$perturb_base <- function(x, sd)
{
mean_shift <- rnorm(1, sd = 3)
y <- x + rnorm(1, mean_shift, sd * 0.8)
return(y)
}
assess_adj$gender_list <- list("Male" = 1,
"Female" = -1)
assess_adj$frl_list <- list("0" = 0.1,
"1" = -0.1)
# Get defaults
assess_sim_par <- OpenSDPsynthR::sim_control()$assess_sim_par
# Increase score variance
assess_sim_par$error_var <- 15
# Increase coefficient effects
assess_sim_par$fixed_param <- assess_sim_par$fixed_param * 10
# Downgrade IEP difference
assess_sim_par$fixed_param[4] <- -0.75
# Downgrade LEP difference
assess_sim_par$fixed_param[5] <- -1
assess_sim_par$fixed_param[6] <- 0
assess_sim_par$fixed_param[7] <- 1
assess_sim_par$lvl1_err_params$mean <- 1
assess_sim_par$lvl1_err_params$sd <- 10
# Set group level variances
assess_sim_par$random_param$random_var <- c(0.4, 0.75)
# Set the school-grade size ranges
assess_sim_par$unbalanceRange <- c(100, 420)
grad_adj <- sim_control()$grad_adjustment
grad_adj$school_list <- NULL
grad_adj$perturb_school <- function(x, schid, schl_par = school_list){
val_mean <- schl_par[[which(schid == names(schl_par))]]
val_sd <- val_mean / 4
val_sd <- abs(val_sd)
y <- x + num_clip(rnorm(1, mean = val_mean, sd = val_sd), -0.45, 0.45)
y <- ifelse(y <= 0, 0.01, y)
y <- ifelse(y >= 1, 0.98, y)
y <- num_clip(y, 0, 1)
return(y)
}
# Conduct the simulation
simlist <- simpop(5000L, seed = 0525212,
control = sim_control(nschls = 12L, n_cohorts = 4L,
assessment_adjustment = assess_adj,
assess_sim_par = assess_sim_par,
grad_adjustment = grad_adj))
names(zzz)
str(zzz)
y[x == "62"] <- "Italian Language and Culture"
str(simlist$stu_year)
table(simlist$stu_year$grade)
